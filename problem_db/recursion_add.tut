#{Text}#
<h3>Recursion - Adding Numbers</h3>

Write a recursive function <tt>add_pos(x,y)</tt>, assuming <tt>y</tt> is not negative, that returns the sum of <tt>x</tt> and <tt>y</tt> using the functions
<p>
<pre>
def minus1(x):
  return x-1

def plus1(x):
  return x+1
</pre>
<p>
You may not use + or - in your code.

#{Hint}#
Note that y is not negative whereas there is no constraint on x.
#{Hint}#
<pre>
x + 0 = x
x + y = (x + (y - 1)) + 1
</pre>






























#{TestCode}#
#{preload}#
def minus1(x):
  return x-1

def plus1(x):
  return x+1

def add_pos(x, y):
    if """replace by your test for the base case - when should you stop?""":    
        # It's the base case
        return """replace by the result for the base case"""
    else:
        # It's the step case - what's the smaller problem?
        # Make the recursive call for the smaller problem
        # and use that result to compute the result for add_pos(x,y)
        return """replace by expression involving a recursive call on add_pos"""
        
#{global}#
import random,compiler
class CodeVisitor:
    def __init__(self):
        self.base = False
        self.step = False
        self.used_plus = False
        self.used_minus = False
        self.in_add_pos = False
        self.rec_call = False
        self.rec_arg = None
        self.if_arg = None
        self.in_if = False
        
    def visitFunction(self,t):
        if t.name == 'add_pos':
            if len(t.argnames) == 2:
                self.rec_arg = t.argnames[1]
            self.in_add_pos = True
            for child in t.getChildNodes():
                compiler.walk(child, self)
        
    def visitCallFunc(self,t):
        if self.in_add_pos:
            if t.getChildNodes()[0].__class__ == compiler.ast.Name and \
               t.node.name == 'add_pos':
                self.rec_call = True
                for child in t.getChildNodes():
                    compiler.walk(child, self)
            else:
                for child in t.getChildNodes():
                    compiler.walk(child, self)
                    
    def visitSub(self,t):
        self.used_minus = True

    def visitAdd(self,t):
        self.used_plus = True

    def visitIf(self, t):
        if self.in_add_pos:
            self.in_if = True
            for child in t.getChildNodes():
                compiler.walk(child, self)
            self.in_if = False

    def visitName(self, t):
        if self.in_if:
            self.if_arg = t.name

#{test}#
#{start}#
import compiler
#{code}#
text = user_text
ast = compiler.parse(text)
visitor = CodeVisitor()

compiler.walk(ast, visitor)
if not visitor.in_add_pos:
    print_error("Wrong: add_pos is not defined.")
elif visitor.used_minus:
    print_error("Wrong: you used '-' in your definition of add_pos.")
elif visitor.used_plus:
    print_error("Wrong: you used '+' in your definition of add_pos.")
elif not visitor.rec_call:
    print_error("Wrong: add_pos should be a recursive function.")
elif visitor.rec_arg != visitor.if_arg:
    print_warning("You don't appear to be using the correct argument for recursion.")

    

#{test}#
#{start}#
import random
x = random.randint(2,100)
y = random.randint(2,100)


#{code}#
answer = x+y

try:
    result = add_pos(x,y)
    ok = True
except Exception as e:
    if "recursion depth" in str(e):
        print_error("Error: "+str(e)+" - are you using minus1 on the second argument of the recursive call - you need to decrease the value of this argument in order to get termination.")
    else:
        print_error("Error: "+str(e))
    ok = False
if not ok:
    pass
elif result == answer:
    correct()
elif result == None:
    print_error("Wrong: the result is None - do you have a return for both the base case and the recursive case?")
else:
    print_error("Wrong: for add_pos(%d, %d) you got %s, the correct answer is %d" %(x,y,repr(result),answer))


    





























