#{Text}#
<h3>Accessing a Dictionary Using Get</h3>
Using square brackets to look up information in a dictionary using a key is fine as long as the key is in the dictionary. If it is not then an exception occurs.
<p>
The dictionary method <tt>get</tt> avoids this problem. It takes a key as an argument and if no second argument is given it returns <tt>None</tt> if the given key is not in the dictionary rather than 'throwing an exception'.
If a second argument is given, it becomes the default value returned if
the given key is not in the dictionary.
<p>
For this problem assume the following assignment statement has been executed.
<p>
<pre>
weekdays = {'Sunday':0, 'Monday':1, 'Tuesday':2, 'Wednesday':3,
            'Thursday':4, 'Friday':5, 'Saturday':6}
</pre>
<p>

Assume the variable <tt>day</tt> contains a value that may or may not be
the name of a day.
Write an assignment statement using <tt>get</tt> that assigns to <tt>day_num</tt> the day number
if <tt>day</tt> contains the name of a day and <tt>-1</tt> otherwise.

<p>For example, if <tt>day</tt> is <tt>'Wednesday'</tt> then <tt>day_num</tt>
should be  <tt>3</tt> and if <tt>day</tt> is <tt>'Talk Like a Pirate Day'</tt> then <tt>day_num</tt> should be  <tt>-1</tt>.




























#{TestCode}#
#{global}#
import random,compiler
#{test}#
#{init}#
weekdays = {'Sunday':0, 'Monday':1, 'Tuesday':2, 'Wednesday':3,
            'Thursday':4, 'Friday':5, 'Saturday':6}
day = 'Sunday'
#{code}#

ast = compiler.parse(user_text)
children = ast.getChildNodes()
if len(children) != 1 or str(children[0].__class__) != 'compiler.ast.Stmt':
        print_error("You should use only one assignment statement")
else:
    children = [c for c in children[0].getChildNodes() if str(c.__class__) != 'compiler.ast.Discard']
    if len(children) != 1 or str(children[0].__class__) != 'compiler.ast.Assign':
        print_error("You should use only one assignment statement (and nothing else)")
    else:
        fun = children[0].getChildren()[1]
        if str(fun.__class__) != 'compiler.ast.CallFunc':
            print_error("You (only) need the get method of the dictionary")
        else:
            method = fun.getChildren()[0]
            if str(method.__class__) != 'compiler.ast.Getattr' or method.attrname != 'get':
                print_error("You (only) need the get method of the dictionary")
#{test}#
#{start}#
wd = {'Sunday':0, 'Monday':1, 'Tuesday':2, 'Wednesday':3,
      'Thursday':4, 'Friday':5, 'Saturday':6}
test = 'TalkLikeAPirateDay'
#{init}#
weekdays = dict(wd)
day = test
#{code}#
if day_num == None:
    print_error("Wrong: don't forget the second argument for get")
elif day_num != -1:
    print_error("Wrong: when day = %s you got %s - you should get -1" % (repr(test), repr(day_num)))
#{test}#
#{start}#
wd = {'Sunday':0, 'Monday':1, 'Tuesday':2, 'Wednesday':3,
      'Thursday':4, 'Friday':5, 'Saturday':6}
#{init}#
weekdays = dict(wd)
day = random.choice(list(wd.keys()))
#{code}#
if weekdays != wd:
    print_error("Wrong: you have modified the dictionary")
elif day_num == wd[day]:
   correct()
else:
   print_error("Wrong: You got %s, the correct answer is %d" %(repr(day_num), wd[day]))
   


























