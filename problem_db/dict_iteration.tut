#{Text}#
<h3>Iterating Over a Dictionary</h3>
A dictionary is an iterable object and so a for loop can be used to iterate over
the entries in a dictionary. The loop

<pre>
for k in dict:
    body_code
</pre>
will iterate over the keys of the dictionary <tt>dict</tt> setting <tt>k</tt>
in turn to each key of <tt>dict</tt>.

<p>
Consider a dictionary that has strings as keys and integers as values - e.g.
<pre>
{'a':24, 'e':30, 't':12, 'n':10}
</pre>
<p>
Write a function <tt>big_keys</tt> that takes such a dictionary as the first argument and an integer as the second argument and returns the list of keys
all of whose values are bigger than the second argument. You must use a for loop to iterate over the dictionary.

<p>
Example: 
<pre>
>>> big_keys({'a':24, 'e':30, 't':12, 'n':10}, 15)
['a', 'e']
</pre>

<p>
<b>Note:</b>The resulting list of keys are not necessarily in the order given above.
#{Hint}#
Don't forget to initialize the result list. 












#{TestCode}#

#{global}#
import random,compiler
class CodeVisitor:
    def __init__(self):
        self.arg1 = None
        self.for_iter = None
        self.in_defn = False
        self.in_for = False
        self.has_defn = False
        self.has_return = False
    def visitFunction(self,t):
        if t.name == 'big_keys':
            self.has_defn = True
            self.in_defn = True
            if len(t.argnames) == 2:
                self.arg1 = t.argnames[0]
            for n in t.getChildNodes():
                compiler.walk(n, self)   
            self.in_defn = False
            
    def visitFor(self,t):
        if self.in_defn:
            self.in_for = True
            if t.getChildNodes()[1].__class__ == compiler.ast.Name:
                self.for_iter = t.getChildNodes()[1].name
            else:
                self.for_iter = 'other'
        for n in t.getChildNodes():
            compiler.walk(n, self)   

            
    def visitReturn(self,t):
        self.has_return = True




#{test}#
#{start}#
di = {'a':21,'b':5,'c':4,'d':6,'e':30,'f':2,'g':4, 'h':20}
ni = 20
#{init}#
d = dict(di)
n = ni


#{code}#
ast = compiler.parse(user_text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
if not visitor.has_defn:
    print_error("Wrong: you don't have a definition of big_keys.")
elif not visitor.in_for:
    print_error('Wrong: your function definition does not contain a for loop.')
elif not visitor.has_return:
    print_error('Wrong: you need a return statement')
elif visitor.for_iter == 'other':
    print_warning('Your for loop should iterate over %s directly' % visitor.arg1)
elif visitor.arg1 != visitor.for_iter:
    print_warning('Your for loop should iterate over %s ' % visitor.arg1)

#{test}#
#{start}#
di = {'a':21,'b':5,'c':4,'d':6,'e':30,'f':2,'g':4, 'h':20}
ni = 20
#{init}#
d = dict(di)
n = ni


#{code}#
answer = [k for k in di if di[k] > ni]
answer.sort()
try:
    result = big_keys(d, n)
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif d != di:
    print_error("Wrong: you have modified the dictionary argument.")
elif result == None:
    print_error("Wrong: are you exiting the function without returning a value?")
elif type(result) != type([]):
    print_error("Wrong: the result should be a list - you got %s" %  repr(result))
else:
    result.sort()
    if result != answer:
        print_error("Wrong: when the dictionary argument is \n%s\n and the integer argument is %d\nyou got %s. The correct answer is %s" % (repr(di), ni, repr(result), repr(answer)))
        
    
#{test}#
#{start}#
di = {'x':27,'t':7,'y':11,'m':6,'e':30}
ni = 10
#{init}#
d = dict(di)
n = ni


#{code}#
answer = [k for k in di if di[k] > ni]
answer.sort()
try:
    result = big_keys(d, n)
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif d != di:
    print_error("Wrong: you have modified the dictionary argument.")
elif result == None:
    print_error("Wrong: are you exiting the function without returning a value?")
elif type(result) != type([]):
    print_error("Wrong: the result should be a list - you got %s" %  repr(result))
else:
    result.sort()
    if result == answer:
        correct()
    else:
        print_error("Wrong: when the dictionary argument is \n%s\n and the integer argument is %d\nyou got %s. The correct answer is %s" % (repr(di), ni, repr(result), repr(answer)))
        












