#{Text}#
<h3>While Statements</h3>
While statements provide a mechanism that allows repeated 
computations to be performed. The while statement has the form:
<br>
<pre>
while condition:
    body_code
</pre>
<br>
where <tt>condition</tt> is a  boolean valued 
expressions and <tt>body_code</tt> 
is a 
sequences of statements.
<p>
<tt>body_code</tt> is repeatedly evaluated until <tt>condition</tt> becomes false
and in which case computation continues with the statement following the while statement.

When writing a while loop there are a few things that you need to consider.
<ul>
<li>Typically, you will need to initialize one or more variables before the while statement. </li>
<li>The condition (test) of the while statement will usually become false 
eventually (otherwise the loop won't terminate).

</li>
<li>The body code typically changes one or more variables in such a way that 
the condition will become false.</li>
</ul> 
For example, the following code, when executed, will output a countdown.
The variable <tt>count</tt> is first initialized, the condition tests if
<tt>count</tt> has reached 0, and in the body of the loop <tt>count</tt> is decremented (and will eventually become 0).
<br>
<pre>
count = 5
while count > 0:
    print count
    count = count - 1
print "Thunderbirds are Go"
</pre>
<br>
Write a function <tt>sum_from_to(start, end)</tt> that uses a while loop to compute the sum of the integers from  <tt>start</tt>
up to, but not including <tt>end</tt>. Don't forget to initialize!

<p>
Examples:
<br><tt>sum_from_to(3, 7)</tt> should evaluate to 18 (i.e. 3+4+5+6).

<br> <tt>sum_from_to(3, 3)</tt> should evaluate to 0.


















#{TestCode}#
#{preload}#
def sum_from_to(start, end):
    """Return the sum of the integers from start up to but not including end.

    sum_from_to(int, int) -> int
    """
    # add your code here: use a while loop

#{global}#
import sys,random,compiler
class CodeVisitor:
    def __init__(self):
        self.count = 0
        self.seen_while = []
        self.has_return = False
        self.in_defn = False
        self.is_defined = False

    def visitFunction(self,t):
        if t.name == 'sum_from_to':
            self.in_defn = True
            self.is_defined = True
            for n in t.getChildNodes():
                compiler.walk(n, self)               

    def visitWhile(self,t):
        if self.in_defn:
            self.count += 1
            self.seen_while.append(self.count)
            compiler.walk(t.body, self)
            self.count -= 1
        
    def visitReturn(self,t):
        self.has_return = True
        
#{test}#
#{init}#
start = 0
end = 0

#{code}#
text = user_text
ast = compiler.parse(text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
if not visitor.is_defined:
    print_error("You haven't defined the sum_from_to function")
elif len(visitor.seen_while) == 0:
    print_error("You need a while loop")
elif len(visitor.seen_while) > 1:
    print_error("You only need one while loop")
elif not visitor.has_return:
    print_error('You need a return statement')

#{test repeats = 3}#
#{start}#
import random
#{init}#
start = random.randint(2,100)
end = random.randint(start+5,110)
#{code}#
answer = 0
for x in range(start,end):
    answer += x
try:
    result = sum_from_to(start, end)
    test_result = result == answer
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass

elif test_result:
    pass
elif result is None:
    print_error("Wrong: you haven't returned a result")
elif type(result) != type(answer):
    print_error("Wrong : you got %s - the result should be an integer" % repr(result))
else:
    print_error("Wrong: for sum_from_to({0}, {1}) you got {2}\n The correct result is {3}".format(start, end, result, answer))

#{test}#
#{init}#
start = 5
end = 5
#{code}#
answer = 0

try:
    result = sum_from_to(start, end)
    test_result = result == answer
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass

elif test_result:
    pass
elif result is None:
    print_error("Wrong: you haven't returned a result")
elif type(result) != type(answer):
    print_error("Wrong : you got %s - the result should be an integer" % repr(result))
else:
    print_error("Wrong: for sum_from_to({0}, {1}) you got {2}\n The correct result is {3}".format(start, end, result, answer))

#{test}#
#{init}#
start = 10
end = 3
#{code}#
answer = 0

try:
    result = sum_from_to(start, end)
    test_result = result == answer
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass

elif test_result:
    correct()
elif result is None:
    print_error("Wrong: you haven't returned a result")
elif type(result) != type(answer):
    print_error("Wrong : you got %s - the result should be an integer" % repr(result))
else:
    print_error("Wrong: for sum_from_to({0}, {1}) you got {2}\n The correct result is {3}".format(start, end, result, answer))



















