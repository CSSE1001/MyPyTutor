#{Text}#
<h3>Filtering Characters from a String</h3>
This task is to implement a function <tt>filter_string(str1, str2)</tt> that takes two strings as input, and returns a copy of <tt>str1</tt> with all characters from <tt>str2</tt> removed.
You should use a for loop to iterate over the first string. 
<p>
For example:
<pre>
filter_string("Spam Spam lovely Spam", "dead parrot") => "SmSmlvlySm"
</pre>



















#{TestCode}#
#{preload}#
def filter_string(str1, str2):
    """Return a copy of str1 with characters from str2 removed.

    filter_string(string, string) -> string
    """
    # add your code here
#{global}#
import random,compiler
class CodeVisitor:
    def __init__(self):
        self.arg1 = None
        self.for_iter = None
        self.in_defn = False
        self.in_for = False
        self.has_return = False
        self.second_loop = False
    def visitFunction(self,t):
        if t.name == 'filter_string':
            self.in_defn = True
            if len(t.argnames) == 2:
                self.arg1 = t.argnames[0]
            for n in t.getChildNodes():
                compiler.walk(n, self)   
            
    def visitFor(self,t):
        if self.in_defn and self.for_iter is None:
            self.in_for = True
            if t.getChildNodes()[1].__class__ == compiler.ast.Name:
                self.for_iter = t.getChildNodes()[1].name
        elif self.in_defn and self.for_iter is not None:
            self.second_loop = True
       
        for n in t.getChildNodes():
            compiler.walk(n, self)   

            
    def visitReturn(self,t):
        self.has_return = True


def is_subset(s1, s2):
    for c in s1:
        if c not in s2:
            return False
    return True

#{test}#
#{init}#
import random
t2 = "Return a copy of str1 with characters from str2 removed"
t3 = list(t2)
random.shuffle(t3)
s1 = ''.join(t3[:40])
s2 = ''.join(t3[40:])



#{code}#
ast = compiler.parse(user_text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
if visitor.arg1 != visitor.for_iter:
    print_warning('Your (outer) for loop should iterate over %s' % visitor.arg1)
if visitor.second_loop:
    print_warning("You only need one loop - use 'in' to test for membership")
if not visitor.in_for:
    print_error('Your function definition does not contain a for loop.')
elif not visitor.has_return:
    print_error('You need a return statement')
else:    
    answer = ''.join([x for x in s1 if x not in s2])
    try:
        result = filter_string(s1,s2)
        ok = True
    except Exception as e:
        print_exception(e)
        ok = False
    if not ok:
        pass

    elif result == None:
        print_error("Wrong: are you exiting the function without returning a value?")
    elif type(result) != type(answer):
        print_error("Wrong: the return type is wrong - for filter_string(%s, %s) you got %s, the correct answer is '%s'." % (repr(s1), repr(s2), repr(result),answer))
    elif result != answer:
        if is_subset(result, answer) and len(answer) == len(result):
                print_error("Wrong: you appear to have the result in the wrong order.\nYou got '%s', the correct answer is '%s'." % (result,answer))
        else:
            print_error("Wrong: for filter_string(%s, %s) you got %s, the correct answer is '%s'." % (repr(s1), repr(s2), repr(result),answer))
    else:
        correct()



















