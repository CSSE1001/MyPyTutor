#{Text}#
<h3>GUI Layout Example II</h3>

In this problem you will lay out two buttons in a frame. 
<p>
You need to write a function <tt>create_layout</tt> that takes a frame as
its only argument and adds two buttons one below the other - the first
one (top-most) has the label <tt>"Button1"</tt> and the other has label
<tt>"Button2"</tt>. Both buttons should use <tt>pressed</tt> as the button
callback (command). Button1 should have 20 pixels of space above and below it
and Button2 should have 20 pixels of space, internal to the button, on the left and right. Both buttons should be at the left edge of the frame.
You may assume that <tt>from Tkinter import *</tt> has already been called and the frame has already had its size and colour set.
<br>
You must use <tt>pack</tt> for layout and <b>not</b> <tt>grid</tt>.
<p>
The frame should appear as depicted below.
<p>
<img src="layout2.gif"/>
<p>
When you check your code a window should pop up showing your layout.
Close the popup window before trying again or moving to a new problem.



































#{TestCode}#

#{global}#

import Tkinter as XXX
class TestWindow(XXX.Toplevel):
    def __init__(self,parent,title, layout_fun):
        XXX.Toplevel.__init__(self, parent)
        self.configure(borderwidth=5)
        self.geometry("400x200+%d+%d" % (parent.winfo_rootx()+30,
                                         parent.winfo_rooty()+30))
        self.layout_fun = layout_fun
        self.CreateWidgets()
        self.resizable(height=XXX.FALSE, width=XXX.FALSE)
        self.title(title)
        self.protocol("WM_DELETE_WINDOW", self.Ok)
        self.parent = parent
        self.buttonOk.focus_set()
        self.bind('<Return>',self.Ok)
        self.bind('<Escape>',self.Ok)

    def CreateWidgets(self):
        frameMain = XXX.Frame(self)
        frameMain.pack(side=XXX.TOP, expand=XXX.TRUE, fill=XXX.BOTH)
        XXX.Label(frameMain, text="Your layout should appear in the frame below").pack()
        problemFrame = XXX.Frame(frameMain, borderwidth=2, relief=XXX.SUNKEN, bg = "#ffffaa")
        problemFrame.pack(fill=XXX.BOTH,expand=XXX.TRUE)
        frameButtons = XXX.Frame(self)
        frameButtons.pack(fill=XXX.X)
        self.buttonOk = XXX.Button(frameButtons, text='Close',
                               command=self.Ok)
        self.buttonOk.pack()
        self.layout_fun(problemFrame)
        self.pf = problemFrame
    
    def Ok(self, event=None):
        self.destroy()
       

#{test}#

#{init}#
def pressed(e = None):
    print "Button Pressed"

import Tkinter
LEFT = Tkinter.LEFT
RIGHT = Tkinter.RIGHT
TOP = Tkinter.TOP
BOTTOM = Tkinter.BOTTOM
W = Tkinter.W
E = Tkinter.E
N = Tkinter.N
S = Tkinter.S
NE = Tkinter.NE
NW = Tkinter.NW
SE = Tkinter.SE
SW = Tkinter.SW
class Button(Tkinter.Button):
    info = []
    def __init__(self, *sargs, **ssargs):
        Tkinter.Button.__init__(self, *sargs, **ssargs)
        self.sargs = sargs
        self.ssargs = ssargs

    def pack(self, *sargs, **ssargs):
        Tkinter.Button.pack(self, *sargs, **ssargs)
        Button.info.append((self.sargs, self.ssargs, sargs, ssargs))
        
#{code}#


try:
    tw = TestWindow(master, 'Layout', create_layout)
    ok = True
except Exception, e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif 'import' in user_text:
    print_error("Do not use import.")
elif len(Button.info) != 2:
    print_error("Wrong: you need to create (and pack) 2 buttons.")
else:
    ba, bsa, pa, psa = Button.info[0]
    if len(ba) != 1 or ba[0] != tw.pf:
        print_error("Wrong: you are not constructing Button1 with the required frame.")
    elif bsa.get('text') == None:
        print_error("Wrong: you have not given Button1 a label.")
    elif bsa.get('text') != 'Button1':
        print_error("Wrong: you have given Button1 the wrong label.")
    elif bsa.get('command') == None:
        print_error("Wrong: you have not given Button1 a command.")
    elif bsa.get('command') != pressed:
        print_error("Wrong: you have not given Button1 the correct command.")
    elif psa.get('side') != None and psa['side'] != 'top':
        print_error("Wrong: you are packing Button1 using the wrong value for side.")
    elif psa.get('anchor') == None:
        print_error("Wrong: you need an anchor argument for Button1.")
    elif psa['anchor'] != 'w':
        print_error("Wrong: you are packing Button1 using the wrong value for anchor.")
    elif psa.get('pady') not in [20, '20']:
        print_error("Wrong: you are not padding Button1 correctly.")  
    ba, bsa, pa, psa = Button.info[1]
    if len(ba) != 1 or ba[0] != tw.pf:
        print_error("Wrong: you are not constructing Button2 with the required frame.")
    elif bsa.get('text') == None:
        print_error("Wrong: you have not given Button2 a label.")
    elif bsa.get('text') != 'Button2':
        print_error("Wrong: you have given Button2 the wrong label.")
    elif bsa.get('command') == None:
        print_error("Wrong: you have not given Button2 a command.")
    elif bsa.get('command') != pressed:
        print_error("Wrong: you have not given Button2 the correct command.")
    elif psa.get('side') != None and psa['side'] != 'top':
        print_error("Wrong: you are packing Button2 using the wrong value for side.")
    elif psa.get('anchor') == None:
        print_error("Wrong: you need an anchor argument for Button2.")
    elif psa['anchor'] != 'w':
        print_error("Wrong: you are packing Button2 using the wrong value for anchor.")
    elif psa.get('ipadx') not in [20, '20'] and bsa.get('padx') not in [20, '20']:
        print_error("Wrong: you are not padding Button2 correctly - use ipadx in pack.")  

#{test}#
#{code}#
correct()

































