#{Text}#
<h3>Summing Elements of a List</h3>
Python comes with a built-in function <tt>sum</tt> that adds together all the elements of a list of numbers. For this problem you will write your own version.
<p>
Write a function definition of <tt>sum_elems</tt> using a for loop
that takes a list of numbers, and returns 
the sum of all the elements of the list.


<p>For example:
<br><tt>sum_elems([1,2,3,4,5]) => 15</tt>












#{TestCode}#

#{global}#
import random,compiler
class CodeVisitor:
    def __init__(self):
        self.arg1 = None
        self.for_iter = None
        self.in_defn = False
        self.in_for = False
        self.has_return = False
        self.has_sum_elems = False
        self.is_defined = False

    def visitFunction(self,t):
        if t.name == 'sum_elems':
            self.in_defn = True
            self.has_sum_elems = True
            self.is_defined = True
            if len(t.argnames) == 1:
                self.arg1 = t.argnames[0]
            for n in t.getChildNodes():
                compiler.walk(n, self)               
            self.in_defn = False
            
    def visitFor(self,t):
        if self.in_defn:
            self.in_for = True
            if t.getChildNodes()[1].__class__ == compiler.ast.Name:
                self.for_iter = t.getChildNodes()[1].name
        for n in t.getChildNodes():
            compiler.walk(n, self)

    def visitReturn(self,t):
        self.has_return = True
        
#{test}#
#{code}#
ast = compiler.parse(user_text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
#if not visitor.has_sum_elems:
#    print_error('You have not defined the sum_elems function.')
if not visitor.is_defined:
    print_error('You have not defined sum_elems')
elif visitor.has_sum_elems and visitor.arg1 != visitor.for_iter:
    print_warning('Your for loop should iterate over %s ' % visitor.arg1)
if visitor.has_sum_elems and not visitor.in_for:
    print_error('Your function definition does not contain a for loop.')
elif visitor.has_sum_elems and not visitor.has_return:
    print_error('You need a return statement')

#{test}#
#{code}#
try:
    result = sum_elems([])
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result != 0:
    print_error('The sum of the empty list should be 0 - you got %s' % repr(result))
    
#{test}#
    
#{start}#
import random
il = [random.randint(1,10) for i in range(random.randint(4,8))]
#{init}#
nums = list(il)
#{code}#
try:
    answer = sum(il)
    result = sum_elems(nums)
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result != answer:
    print_error('Wrong: sum_elems(%s) should return %d you got %s' % (repr(nums), answer, repr(result)))
elif nums != il:
    print_error('Wrong: you have modified the input list')
else:
    correct()
                















