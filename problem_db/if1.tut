#{Text}#
<h3>If Statements 1</h3>
If statements provide a mechanism that allows different computations to be performed based on a condition. There are several forms of if statements. This problem is about the simplest form:
<br>
<pre>
if condition:
    code
</pre>
<br>
where <tt>condition</tt> is a boolean valued expression and <tt>code</tt> is
a sequence of statements.
<br>
If <tt>condition</tt> is <tt>True</tt> then <tt>code</tt> will be executed.
<br>
If <tt>condition</tt> is <tt>False</tt> then <tt>code</tt> will not be executed.
<p>
For example, if the following code is executed then <tt>r</tt> will be assigned the value <tt>"ZERO"</tt> if the variable <tt>m</tt> has the value 0.
<br>
<pre>
if m == 0:
    r = "ZERO"
</pre>
<br>
Assume the variable <tt>n</tt> has an integer value. 
Write an if statement that negates <tt>n</tt> (i.e. assigns <tt>-n</tt> to <tt>n</tt>) if and only if it is less than 0.

<p>
<b>Note:</b> You are simply to write an if statement - not a function.
#{Hint}#
You only need to change <tt>n</tt> if it is negative.















#{TestCode}#
#{global}#
import compiler
class CodeVisitor:
    def __init__(self):
        self.fun_def = False
        self.has_if = False
        self.assign_before_if = False
        self.num_branches = 0

    def visitFunction(self,t):
        self.fun_def = True

    def visitAssign(self, t):
        if not self.has_if and t.getChildNodes()[0].name == 'n':
            self.assign_before_if = True
            
    def visitIf(self, t):
        self.has_if = True
        self.num_branches = len(t.getChildNodes()) - 1

#{test}#
#{init}#
n = -3      
#{code}#
text = user_text
ast = compiler.parse(text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
if visitor.fun_def:
    print_error("Wrong: don't use a function - just an if statement.")
elif not visitor.has_if:
    print_error("Wrong: you need to use an if statement.")
elif visitor.num_branches != 1:
    print_error("Wrong: you don't need an else branch.")
elif visitor.assign_before_if:
    print_warning("You appear to be assigning to n before the if statement.")
    
#{test}#
#{init}#
n = -3
#{code}#
if n < 0:
   print_error("You did not change n to a positive number") 
result = n == 3
if not result:
    print_error("You did not correctly negate n")
    
#{test}#
#{init}#
n = 5
#{code}#
result2 = n == 5
if result2:
    correct()
else:
    print_error("You changed a positive n")





















