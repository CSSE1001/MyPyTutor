#{Text}#
<h3>Slicing Strings</h3>
Any iterable object can be sliced. Slicing is used to extract
a sub-collection of elements. For example, slicing can be used to get
elements for a range of indicies.

<p>
Assume the variable <tt>text</tt> contains a string of length at least 10
and <tt>start</tt> and <tt>end</tt> contain positive integer values.

Use slicing to write three assignment statements that respectively assigns the 
substring of <tt>text</tt> from index <tt>start</tt> up to but
not including <tt>end</tt> to the variable <tt>ones</tt>, 
the 
substring of <tt>text</tt> from index <tt>start</tt> up to but
not including <tt>end</tt> in steps of two to the variable <tt>twos</tt>
and 
the 
substring of <tt>text</tt> from index <tt>end</tt> down to but not including
<tt>start</tt> to the variable <tt>back</tt>.

<p>
For example, if <tt>text</tt> is <tt>'abcdefghijk'</tt>, <tt>start</tt> is <tt>1</tt> and <tt>end</tt> is <tt>7</tt>, then <tt>ones</tt> should be <tt>'bcdefg'</tt>, <tt>twos</tt> should be <tt>'bdf'</tt> and <tt>back</tt>
should be <tt>'hgfedc'</tt>.


#{TestCode}#
#{test}#
#{init}#
text = 'abcdefghijklm'
start =  4
end = 4
#{code}#
if ones == '' and twos == '' and back == '':
    pass
else:
    print_error("Wrong: when start >= end then the results should be ''")
    
#{test}#             
#{start}#
import random
tlist = list('abcdefghijklm')
random.shuffle(tlist)
text_init = ''.join(tlist)
#{init}#
text=text_init
start = 2
end = 8
#{code}#
o,t,b = text_init[2:8], text_init[2:8:2], text_init[8:2:-1]
if text != text_init:
    print_error("Do not assign a value to text - MyPyTutor does that.")
elif ones != o:
    print_error("Wrong: for ones you got '%s' - the correct answer is '%s'" % (ones, o))
elif twos != t:
    print_error("Wrong: for twos you got '%s' - the correct answer is '%s'" % (twos, t))
elif back != b:
    print_error("Wrong: for back you got '%s' - the correct answer is '%s'" % (back, b))
else:
    correct()





