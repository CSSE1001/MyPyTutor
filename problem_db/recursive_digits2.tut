#{Text}#
<h3>Recursion - Extracting Digits Using a Base</h3>

Write a recursive function <tt>dec2base(n, b)</tt> that returns the list of base <tt>b</tt> digits in the positive integer <tt>n</tt>.
<p>
Examples:
<pre>
dec2base(120, 10) => [1,2,0] (1*10**2 + 2*10**1 + 0*10**0)
dec2base(273, 8) => [4,2,1] (4*8**2 + 2*8**1 + 1*8**0)
dec2base(61, 2) => [1,1,1,1,0,1] (1*2**5 +1*2**4 +1*2**3 + 1*2**2 + 0*2**1 + 1*2**0)
</pre>



























#{TestCode}#

#{global}#
import random,compiler
class CodeVisitor:
    def __init__(self):
        self.in_dec2base = False
        self.rec_call = False
        self.rec_arg = None
        self.if_arg = None
        self.in_if = False
        self.rec_arg_ok = False
        
    def visitFunction(self,t):
        if t.name == 'dec2base':
            if len(t.argnames) == 2:
                self.rec_arg = t.argnames[0]
            self.in_dec2base = True
            for child in t.getChildNodes():
                compiler.walk(child, self)
        
    def visitCallFunc(self,t):
        if self.in_dec2base:
            if t.getChildNodes()[0].__class__ == compiler.ast.Name and \
               t.node.name == 'dec2base':
                self.rec_call = True
                for child in t.getChildNodes():
                    compiler.walk(child, self)
            else:
                for child in t.getChildNodes():
                    compiler.walk(child, self)
                    

    def visitIf(self, t):
        if self.in_dec2base:
            self.in_if = True
            for child in t.getChildNodes():
                compiler.walk(child, self)
            self.in_if = False

    def visitName(self, t):
        if self.in_if:
            if t.name == self.rec_arg:
                self.rec_arg_ok = True


#{test}#
#{start}#
import compiler
#{code}#
text = user_text
ast = compiler.parse(text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)

if not visitor.in_dec2base:
    print_error("Wrong: dec2base is not defined.")
elif not visitor.rec_call:
    print_error("Wrong: dec2base should be a recursive function.")
elif not visitor.rec_arg_ok:
    print_warning("You don't appear to be using the correct argument for recursion.")
    

#{test repeats = 3}#
#{start}#
import random
x = random.randint(2,1000)
b = 10


#{code}#
answer = []
n = x
while n > 0:
    rem = n % b
    n = n / b
    answer = [rem] + answer

try:
    result = dec2base(x, b)
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result != answer:
    print_error("Wrong: for dec2base(%d,%d) you got " % (x,b) + str(result) + ", the correct answer is " +str(answer))

#{test repeats = 3}#
#{start}#
import random
x = random.randint(2,1000)
b = 8


#{code}#
answer = []
n = x
while n > 0:
    rem = n % b
    n = n / b
    answer = [rem] + answer

try:
    result = dec2base(x, b)
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result != answer:
    print_error("Wrong: for dec2base(%d,%d) you got " % (x,b) + str(result) + ", the correct answer is " +str(answer))

#{test repeats = 3}#
#{start}#
import random
x = random.randint(2,1000)
b = 2


#{code}#
answer = []
n = x
while n > 0:
    rem = n % b
    n = n / b
    answer = [rem] + answer

try:
    result = dec2base(x, b)
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result != answer:
    print_error("Wrong: for dec2base(%d,%d) you got " % (x,b) + str(result) + ", the correct answer is " +str(answer))

#{test}#
#{code}#
correct()






