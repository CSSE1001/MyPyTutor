#{Text}#
<h3>Recursion - Extracting Digits</h3>


Write a recursive function <tt>getdigits(n)</tt> that returns the list of digits in the positive integer <tt>n</tt>. 
<p>
Example
<pre>
getdigits(124) => [1,2,4]
</pre>
#{Hint}#
You will need integer division (/) and remainder (%)
#{Hint}#
<pre>
124 == 12*10 + 4     124/10 == 12     124%10 == 4
</pre>
#{Hint}#
<tt>
[1,2,4] == [1,2]+[4]
</tt>































#{TestCode}#

#{global}#
import random,compiler
class CodeVisitor:
    def __init__(self):
        self.in_getdigits = False
        self.rec_call = False
        self.rec_arg = -1
        self.if_arg = None
        self.in_if = False
        self.in_compare = False
        
    def visitFunction(self,t):
        if t.name == 'getdigits':
            if len(t.argnames) == 1:
                self.rec_arg = t.argnames[0]
            self.in_getdigits = True
            for child in t.getChildNodes():
                compiler.walk(child, self)
        
    def visitCallFunc(self,t):
        if self.in_getdigits:
            if t.getChildNodes()[0].__class__ == compiler.ast.Name and \
               t.node.name == 'getdigits':
                self.rec_call = True
                for child in t.getChildNodes():
                    compiler.walk(child, self)
            else:
                for child in t.getChildNodes():
                    compiler.walk(child, self)
                    

    def visitIf(self, t):
        if self.in_getdigits:
            self.in_if = True
            for child in t.getChildNodes():
                compiler.walk(child, self)
            self.in_if = False

    def visitCompare(self, t):
        if self.in_if:
            self.in_compare = True
            for child in t.getChildNodes():
                compiler.walk(child, self)
            self.in_compare = False

    def visitName(self, t):
        if self.in_compare:
            self.if_arg = t.name

#{test}#
#{code}#
try:
    result = getdigits(1)
except Exception as e:
    print_exception(e)
#{test}#
#{start}#
import compiler
#{code}#
text = user_text
ast = compiler.parse(text)
visitor = CodeVisitor()

compiler.walk(ast, visitor)
if visitor.rec_arg == -1:
    print_error("Wrong: getdigits has the wrong number of arguments.")
elif not visitor.in_getdigits:    
    print_error("Wrong: getdigits is not defined.")
elif not visitor.rec_call:
    print_error("Wrong: getdigits should be a recursive function.")
elif visitor.rec_arg != visitor.if_arg:
    print_warning("You don't appear to be using the correct argument for recursion or your test is overly complicated.")

#{test repeats=4}#
#{start}#
import random
x = random.randint(2,10000)


#{code}#
answer = []
xn = x
while xn > 0:
    rem = xn % 10
    xn = xn / 10
    answer = [rem] + answer

try:
    result = getdigits(x)
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result != answer:
    print_error("Wrong: for getdigits(%d) you got " % x + str(result) + ", the correct answer is " +str(answer))

#{test}#
#{code}#
correct()
    






























