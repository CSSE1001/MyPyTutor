#{Text}#
<h3>Using Range</h3>
The built-in function <tt>range</tt> constructs lists of integers.

<p>
Assume the variables <tt>start</tt> and <tt>end</tt> contain integers, write
assignment statements that use <tt>range</tt> to assign the list of integers from <tt>start</tt> up to but not including <tt>end</tt> to the variable <tt>ones</tt>, the list of integers from <tt>start</tt> up to but not including <tt>end</tt> in steps of two to the variable <tt>twos</tt>, and the list of integers from <tt>end</tt> down to but not including <tt>start</tt> to the variable <tt>back</tt>.


<p>
For example, if <tt>start</tt> is <tt>3</tt> and <tt>end</tt> is <tt>8</tt>
then <tt>ones</tt> should be the list <tt>[3,4,5,6,7]</tt>, <tt>twos</tt> should be <tt>[3, 5, 7]</tt> and <tt>back</tt> should be <tt>[8,7,6,5,4]<tt>.





#{TestCode}#
#{test}#
#{init}#
start =  4
end = 4
#{code}#
if start != 4 or end != 4:
    print_error("Do not assign a value to start or end - MyPyTutor does that.")
elif ones == [] and twos == [] and back == []:
    pass
else:
    print_error("Wrong: when start >= end then the results should be []")
    
#{test}#             
#{start}#
import random
si = random.randint(2,20)
ei = random.randint(si+5, 26)
#{init}#
start = si
end = ei
#{code}#
o,t,b = range(si, ei), range(si, ei, 2), range(ei, si, -1)
if start != si or end != ei:
    print_error("Do not assign a value to start or end - MyPyTutor does that.")
elif ones != o:
    print_error("Wrong: for ones you got %s - the correct answer is %s" % (repr(ones), repr(o)))
elif twos != t:
    print_error("Wrong: for twos you got %s - the correct answer is %s" % (repr(twos), repr(t)))
elif back != b:
    print_error("Wrong: for back you got %s - the correct answer is %s" % (repr(back), repr(b)))
else:
    correct()








