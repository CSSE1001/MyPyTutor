#{Text}#
<h3>Processing Lists Using a For Loop</h3>
Lists are iterable objects and so for loops are typically used to process them.
<p>
Write a function definition of <tt>has_gt</tt>
that takes a list of numbers and a number and returns <tt>True</tt> if the first argument contains a number greater than the second argument. <tt>False</tt> is returned otherwise. 

<p>For example:
<br><tt>has_gt([1,2,3], 3) => False</tt>
<br><tt>has_gt([1,2,3], 2) => True</tt>

#{Hint}#
You can return from inside a for loop.















#{TestCode}#
#{preload}#
def has_gt(nums, n):
    """Return True iff nums contains at least one number bigger than n.

    has_gt(list<number>, number) -> boolean
    """
    # add your code here

#{global}#
import random,compiler
class CodeVisitor:
    def __init__(self):
        self.arg1 = None
        self.for_iter = None
        self.in_defn = False
        self.in_for = False
        self.has_return = False
        self.is_defined = False
    def visitFunction(self,t):
        if t.name == 'has_gt':
            self.in_defn = True
            self.is_defined = True
            if len(t.argnames) == 2:
                self.arg1 = t.argnames[0]
            for n in t.getChildNodes():
                compiler.walk(n, self)               
    def visitFor(self,t):
        if self.in_defn and self.for_iter is None:
            self.in_for = True
            if t.getChildNodes()[1].__class__ == compiler.ast.Name:
                self.for_iter = t.getChildNodes()[1].name
        for n in t.getChildNodes():
            compiler.walk(n, self)               
   
    def visitReturn(self,t):
        self.has_return = True
        
#{test}#
#{code}#
ast = compiler.parse(user_text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
if not visitor.is_defined:
    print_error('You have not defined has_gt')
elif not visitor.in_for:
    print_error('Your function definition does not contain a for loop.')
elif not visitor.has_return:
    print_error('You need a return statement')
elif visitor.arg1 != visitor.for_iter:
    print_error('Your for loop should iterate over %s ' % visitor.arg1)
#{test}#
#{code}#
try:
    result = has_gt([], 3)
    ok = True
except Exception, e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result == None:
    print_error('Wrong: When the empty list is supplied you appear to be exiting the function without returning a value.')
elif type(result) != type(True):
    print_error('Wrong: The result should be a boolean - you got %s'% repr(result))
elif result == True:
    print_error('Wrong: the empty list contains no large numbers')

#{test}#
#{start}#
choices = [([1,2,3,4,5,6,7,8], 9), ([2,7,9,21,64], 100), ([2,2,3,3,7,7,9,9,9],10)]
inums, n = random.choice(choices)
#{init}#
nums = list(inums)
#{code}#
try:
    result = has_gt(nums, n)
    ok = True
except Exception, e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result == None:
    print_error('Wrong: you appear to be exiting the function without returning a value.')
elif type(result) != type(True):
    print_error('Wrong: The result should be a boolean - you got %s' % repr(result))
elif result == True:
    print_error('Wrong: has_gt('+str(nums)+', '+str(n)+') should return False')
elif nums != inums:
    print_error('Wrong: you have modified the input list')
    
#{test}#
#{start}#
choices = [([1,2,3,4,5,6,7,8], 3), ([2,7,9,21,64], 63), ([2,2,3,3,7,7,9,9,9],3)]
inums, n = random.choice(choices)
#{init}#
nums = list(inums)
#{code}#
try:
    result = has_gt(nums, n)
    ok = True
except Exception, e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result == None:
    print_error('Wrong: you appear to be exiting the function without returning a value.')
elif type(result) != type(True):
    print_error('Wrong: The result should be a boolean - you got %s' % repr(result))
elif result == False:
    print_error('Wrong: has_gt('+str(nums)+', '+str(n)+') should return True')
elif nums != inums:
    print_error('Wrong: you have modified the input list')

#{test}#
#{start}#

inums, n = ([1,2,3,4,5,6,7,8], 0)
#{init}#
nums = list(inums)

#{code}#
try:
    result = has_gt(nums, n)
    ok = True
except Exception, e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result == None:
    print_error('Wrong: you appear to be exiting the function without returning a value.')
elif type(result) != type(True):
    print_error('Wrong: The result should be a boolean - you got %s' % repr(result))
elif result == False:
    print_error('Wrong: has_gt('+str(nums)+', '+str(n)+') should return True')
elif nums != inums:
    print_error('Wrong: you have modified the input list')
else:
    correct()









