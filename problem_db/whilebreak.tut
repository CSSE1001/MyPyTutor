#{Text}#
<h3>While Using Break</h3>
This problem combines the use of a while loop and break.
<p>
When a break inside a while loop is evaluated, the while loop exits and
evaluation continues at the statement immediately after the body of the loop.
<p>
Write a function <tt>div_7_11(start)</tt> that computes 
the number of integers from  <tt>start</tt>
up to (and including) the first integer that is divisible by either <tt>7</tt> or <tt>11</tt>. 
<p>
For example, <tt>div_7_11(23)</tt> evaluates to <tt>6</tt> and 
<tt>div_7_11(7)</tt> evaluates to <tt>1</tt>.
<p>


#{Hint}#
Use <tt>break</tt> to exit the while loop when the appropriate condition is met.






















#{TestCode}#
#{global}#
import sys,random,compiler
class CodeVisitor:
    def __init__(self):
        self.count = 0
        self.seen_while = []
        self.has_return = False
        self.in_defn = False
        self.is_defined = False
        self.seen_break = []

    def visitFunction(self,t):
        if t.name == 'div_7_11':
            self.in_defn = True
            self.is_defined = True
            for n in t.getChildNodes():
                compiler.walk(n, self)               

    def visitWhile(self,t):
        if self.in_defn:
            self.count += 1
            self.seen_while.append(self.count)
            compiler.walk(t.body, self)
            self.count -= 1
        
    def visitReturn(self,t):
        self.has_return = True
        
    def visitBreak(self,t):
        self.seen_break.append(self.count)
 

#{test}#
#{init}#
start = 21
#{code}#
text = user_text
ast = compiler.parse(text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
if not visitor.is_defined:
    print_error("You haven't defined the div_7_11 function")
elif len(visitor.seen_while) == 0:
    print_error("You need a while loop")
elif len(visitor.seen_while) > 1:
    print_error("You only need one while loop")
elif len(visitor.seen_break) == 0:
    print_error("You need a break")
elif len(visitor.seen_break) > 1:
    print_error("You only need one break")
elif visitor.seen_while[0] > visitor.seen_break[0]:
    print_error("The break statement needs to be inside the while loop")
elif not visitor.has_return:
    print_error('You need a return statement')

#{test repeats = 3}#
#{start}#
import random
#{init}#
start = 7*11*random.randint(1,2) - random.randint(2,5)
if (start % 7) == 0 or (start % 11) == 0:
    answer = 1
else:
    answer = min(8 - (start % 7), 12 - (start % 11))

#{code}#
try:
    result = div_7_11(start)
    test_result = result == answer
    ok = True
except Exception, e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result is None:
    print_error("Wrong: you haven't returned a result")
elif type(result) != type(0):
    print_error("Wrong : you got {0} - the result should be an integer".format(repr(result)))
elif not test_result:
    print_error("Wrong: for div_7_11({0}) you got {1}\n The correct result is {2}".format(start, result, answer))

#{test repeats = 3}#
#{start}#
import random
#{init}#
start = 7*11*random.randint(1,2) +random.randint(1,5)
if (start % 7) == 0 or (start % 11) == 0:
    answer = 1
else:
    answer = min(8 - (start % 7), 12 - (start % 11))

#{code}#
try:
    result = div_7_11(start)
    test_result = result == answer
    ok = True
except Exception, e:
    print_exception(e)
    ok = False
if not ok:
    pass

elif result is None:
    print_error("Wrong: you haven't returned a result")
elif type(result) != type(0):
    print_error("Wrong : you got %s - the result should be an integer" % repr(result))
elif not test_result:
    print_error("Wrong: for div_7_11({0}) you got {1}\n The correct result is {2}".format(start, result, answer))

#{test repeats = 3}#
#{start}#
import random
#{init}#
start = 7*11*random.randint(1,2) +random.randint(8,10)
if (start % 7) == 0 or (start % 11) == 0:
    answer = 1
else:
    answer = min(8 - (start % 7), 12 - (start % 11))

#{code}#
try:
    result = div_7_11(start)
    test_result = result == answer
    ok = True
except Exception, e:
    print_exception(e)
    ok = False
if not ok:
    pass

elif result is None:
    print_error("Wrong: you haven't returned a result")
elif type(result) != type(0):
    print_error("Wrong : you got %s - the result should be an integer" % repr(result))
elif not test_result:
    print_error("Wrong: for div_7_11({0}) you got {1}\n The correct result is {2}".format(start, result, answer))

#{test}#
#{init}#
start = 21
answer = 1
#{code}#
try:
    result = div_7_11(start)
    test_result = result == answer
    ok = True
except Exception, e:
    print_exception(e)
    ok = False
if not ok:
    pass

elif result is None:
    print_error("Wrong: you haven't returned a result")
elif result == 1:
    correct()
elif type(result) != type(0):
    print_error("Wrong : you got %s - the result should be an integer" % repr(result))
else:
    print_error("Wrong: for div_7_11({0}) you got {1}\n The correct result is {2}".format(start, result, answer)) 





















