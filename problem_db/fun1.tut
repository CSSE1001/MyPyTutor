#{Text}#
<h3>Using Functions</h3>
This problem is about using functions that return values.
<p>
The supplied functions <tt>increment</tt> and <tt>double</tt> respectively
return the increment (by one) and the double of its argument, for example
<tt>increment(3)</tt> evaluates to <tt>4</tt> and <tt>double(5)</tt> evaluates to <tt>10</tt>.
<br>
Further assume
the variable <tt>n</tt> contains an integer value (remember that this means MyPyTutor will choose a value for <tt>n</tt>).
<p>
Write a single assignment statement using both of these functions that assigns <tt>2*(n+1)</tt> to 
the variable <tt>m</tt>.
























#{TestCode}#
#{preload}#
def increment(x):
    """Return x+1
    increment(int) -> int
    """
    return x+1

def double(x):
    """Return 2*x
    double(int) -> int
    """
    return 2*x

#{global}#
import random,compiler
class CodeVisitor:
    def __init__(self):
        self.count = 1
        self.seen_inc = []
        self.seen_double = []
        self.in_assign = False
    def visitCallFunc(self,t):
        if self.in_assign:
            if t.node.name == 'double':
                self.seen_double.append(self.count)
                self.count += 1
            elif t.node.name == 'increment':
                self.seen_inc.append(self.count)
                self.count += 1
            for arg in t.args:
                compiler.walk(arg, self)
    def visitAssign(self,t):
        if t.nodes[0].name == 'm':
            self.in_assign = True
            compiler.walk(t.expr, self)



#{test}#

        
#{start}#
import random
import compiler
n_init = random.randint(2,100)
#{init}#
n = n_init

#{code}#
text = user_text
ast = compiler.parse(text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
result = 2*(n_init+1) == m
if n != n_init:
    print_error("Do not assign a value to n - MyPyTutor does that.")
elif not visitor.in_assign:
    print_error("You have not assigned to the variable m")
elif len(visitor.seen_double) == 0:
    print_error("You need to use the double function in your single assignment statement")
elif len(visitor.seen_inc) == 0:
    print_error("You need to use the increment function in your single assignment statement")
elif len(visitor.seen_double) > 1:
    print_error("You only need to use double once")
elif len(visitor.seen_inc) > 1:
    print_error("You only need to use increment once")
elif visitor.seen_double[0] > visitor.seen_inc[0]:
    print_error("You should be using increment inside the use of double")
elif result:
    correct()
else:
    print "Wrong: for n = "+str(n_init)+" you got "+\
          str(m)+" - the correct answer is "+str(2*(n_init+1))


    






















