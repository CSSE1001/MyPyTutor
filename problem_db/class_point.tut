#{Text}#
<h3>A Point Class Definition</h3>


Here is a skeleton of a class definition for a two-dimensional point, with <tt>x</tt> and <tt>y</tt> coordinates.
<p>
<pre>
import math
epsilon = 0.000001

class Point(object):

    def __init__(self, x, y):
        self._x = x
        self._y = y
        
    def __repr__(self):
        return "Point({0}, {1})".format(self._x, self._y)
</pre>
<p>
First, add a method, called <tt>dist_to_point</tt> that takes another point object, <tt>p</tt>, as an argument and returns the euclidean distance between the two points. Feel free to use <tt>math.sqrt</tt>.
<p>
Test case:
<pre>
foo = Point(1,2)
bar = Point(3,4)
foo.dist_to_point(bar) ===> 2.8284271
</pre>
<p>
Next, add a method, called <tt>is_near</tt> that takes another point object, <tt>p</tt>, as an argument and returns <tt>True</tt> if the distance between this point and <tt>p</tt> is less than <tt>epsilon</tt> (defined in the class skeleton above) and <tt>False</tt> otherwise. Use <tt>dist_to_point</tt>. 
<p>
Test case:
<pre>
foo = Point(1,2)
bar = Point(1.00000000001, 2.0000000001)
foo.is_near(bar) ===> True
</pre>
<p>
Finally, add a method, called <tt>add_point</tt> that takes another point object, <tt>p</tt>, as an argument, and changes this point so that it is the sum of this point's old value and the value of <tt>p</tt>.
<p>
Test case:
<pre>
foo = Point(1,2)
bar = Point(3,4)
foo.add_point(bar)
repr(foo) ==> 'Point(4,6)'
</pre>
















#{TestCode}#
#{preload}#
import math
epsilon = 0.000001

class Point:
    def __init__(self, x, y):
        self._x = x
        self._y = y
        
#{global}#
import random,compiler
class CodeVisitor:
    def __init__(self):
        self.class_defn = False
        self.init_defn = -1
        self.dist_defn = -1
        self.near_defn = -1
        self.add_defn = -1
        self.in_class = False
        self.in_near = False
        self.near_same_args = False
        self.near_call_dist = False
        self.near_call_arg = None
        self.point_near = False
    def visitClass(self,t):
        if t.name == 'Point':
            self.class_defn = True
            self.in_class = True
            for n in t.getChildNodes():
                compiler.walk(n, self)
            self.in_class = False
    def visitFunction(self,t):
        if self.in_class:
            if t.name == '__init__':
                self.init_defn = len(t.argnames)
            elif t.name == 'dist_to_point':
                self.dist_defn = len(t.argnames)
            elif t.name == 'is_near':
                self.in_near = True
                self.near_defn = len(t.argnames)
                if self.near_defn == 2:
                    self.near_call_arg = t.argnames[1]
                for n in t.getChildNodes():
                    compiler.walk(n, self)
                self.in_near = False
            elif t.name == 'add_point':
                self.add_defn = len(t.argnames)

    def visitCallFunc(self, t):
        try:
            if self.in_near:
                if len(t.args) == 0:
                    return
                children = t.getChildNodes()
                if len(children) < 2:
                    return
                if (len(children) == 2) and not self.near_call_dist:
                    fcall = children[0] 
                    farg = children[1]
                    self.near_same_args = hasattr(farg, 'name') and (farg.name == self.near_call_arg)
                    self.near_call_dist = (fcall.attrname == 'dist_to_point')
                elif (len(children) == 3) and not self.near_call_dist:
                    fcall = children[0] 
                    farg1 = children[1]
                    farg2 = children[2]
                    if fcall.getChildren()[0].name == 'Point':
                        self.near_same_args = hasattr(farg2, 'name') and (farg2.name == self.near_call_arg)
                        self.near_call_dist = fcall.attrname == 'dist_to_point'
                        self.point_near = True
        except:
            pass
               


#{test}#
#{code}#
ast = compiler.parse(user_text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
if visitor.class_defn == -1:
    print_error("Wrong: you didn't define the Point class")
elif visitor.init_defn == -1:
    print_error("Wrong: you didn't define the __init__ method")
elif visitor.init_defn != 3:
    print_error("Wrong: __init__ has the wrong number of arguments - there should be 3 arguments: \nself, an x and a y.")
elif visitor.dist_defn == -1:
    print_error("Wrong: you didn't define the dist_to_point method")
elif visitor.near_defn == -1:
    print_error("Wrong: you didn't define the is_near method")
elif visitor.add_defn == -1:
    print_error("Wrong: you didn't define the add_point method")
elif visitor.dist_defn != 2:
    print_error("Wrong: dist_to_point has the wrong number of arguments - there should be 2 arguments: self and a point object")
elif not visitor.near_call_dist:
    print_error("Wrong: you should call dist_to_point (as a method) in is_near")
elif not visitor.near_same_args:
    print_error("Wrong: you are not calling dist_to_point with the correct argument in is_near")
    
elif visitor.near_defn != 2:
    print_error("Wrong: is_near has the wrong number of arguments - there should be 2 argument: self and a point object.")
elif visitor.add_defn != 2:
    print_error("Wrong: add_point has the wrong number of arguments - there should be 2 argument: self and a point object.")
elif visitor.point_near:
    print_warning("Warning: It's more usual to write self.dist_to_point(p) rather than Point.dist_to_point(self, p)")
    
#{test repeats = 3}#
#{code}#
#import math
x1 = random.randint(0,10)
y1 = random.randint(0,10)
x2 = random.randint(4,10)
y2 = random.randint(4,10)
x3 = random.randint(0,10)
y3 = random.randint(0,10)

try:
    p1 = Point(x1, y1)
    p2 = Point(x2, y2)
    p3 = Point(x3, y3)
    if p1._x != x1 or p1._y != y1:
        print_error("Wrong: you have not constructed the point object correctly - your point has coords (%s, %s) - the correct coords are (%d, %d)" % (repr(p1.x), repr(p1.y), x1, y1))
    elif abs(p1.dist_to_point(p2) - math.sqrt((x1-x2)**2 + (y1-y2)**2)) > epsilon**2:
        print_error("Wrong: The distance between the points Point(%d, %d) and Point(%d, %d) is %f - not %s" % \
                    (x1,  y1, x2, y2, math.sqrt((x1-x2)**2 + (y1-y2)**2),
                     repr(p1.dist_to_point(p2))))
    elif p1.is_near(Point(x1+epsilon, y1+epsilon)):
        print_error("Wrong: the points Point(%d, %d) and Point(%f, %f) are not near." % (x1, y1, x1+epsilon, y1+epsilon))
    elif not p1.is_near(Point(x1+epsilon/2, y1+epsilon/2)):
        print_error("Wrong: the points Point(%d, %d) and Point(%f, %f) are near." % (x1, y1, x1+epsilon/2, y1+epsilon/2))
    else:
        p1.add_point(p2)
        if p1._x != x1+x2 or p1._y != y1+y2:
            print_error("Wrong: when adding the point Point(%d, %d) to the point Point(%d, %d)\n you should get Point(%d, %d) - you got Point(%s, %s)" %\
                        (x1, y1, x2, y2, x1+x2, y1+y2, repr(p1._x), repr(p1._y)))
except AttributeError as e:
    if '__getitem__' in str(e):
        print_error("Error: you are trying to index into a point object.\nThey are not lists or tuples - for a point object p use p._x and p._y to access the required attributes.")
    else:
        print_exception(e)
        
except Exception as e:
    print_exception(e)
    
#{test}#
#{code}#
correct()




















