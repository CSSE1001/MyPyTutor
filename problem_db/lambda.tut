#{Text}#
<h3>Writing Lambda Functions</h3>
A lambda term (function) provides a mechanism for defining 'anonymous functions'.
<br>
A lambda term has the form
<br>
<tt>lambda </tt> <it>args</it><tt>:</tt> <it>expr</it>
<br>
where <it>args</it> is an argument list (like the formal parameters of a 
function) and <it>expr</it> is an expression.
<p>
So, for example, given the assignment
<br>
<tt>f = lambda x: x+1</tt>
<br>
then <tt>f</tt> can be used as a function with one argument. The
expression <tt>f(5)</tt> evaluates to <tt>6</tt>.

<p>

For this problem you are to write two assignment statements that respectively
assigns to the variable <tt>square</tt> the lambda term that squares its argument, and assigns to the variable <tt>odd</tt> the lambda term that
tests if its argument is an odd number.














#{TestCode}#

#{global}#
import random,compiler
class CodeVisitor:
    def __init__(self):
        self.square_assign = False
        self.odd_assign = False
        self.square_lambda = False
        self.odd_lambda = False

    def visitAssign(self, t):
        if t.getChildren()[0].__class__ == compiler.ast.AssName:
            if t.getChildren()[0].name == 'square':
                self.square_assign = True
                if t.getChildren()[1].__class__ == compiler.ast.Lambda:
                    self.square_lambda = True
            if t.getChildren()[0].name == 'odd':
                self.odd_assign = True
                if t.getChildren()[1].__class__ == compiler.ast.Lambda:
                    self.odd_lambda = True         
        elif t.getChildren()[0].__class__ == compiler.ast.AssTuple:
            names = []
            for child in t.getChildren()[0].getChildren():
                names.append(child.name)
            for index,child in enumerate(t.getChildren()[1].getChildren()):
                if names[index] == 'square':
                    self.square_assign = True
                    if child.__class__ == compiler.ast.Lambda:
                        self.square_lambda = True
                if names[index] == 'odd':
                    self.odd_assign = True
                    if child.__class__ == compiler.ast.Lambda:
                        self.odd_lambda = True

            
#{test}#

#{code}#
ast = compiler.parse(user_text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
if not visitor.square_assign:
    print_error('You have not assigned to square.')
elif not visitor.square_lambda:
    print_error('You have not used lambda in the square assignment.')
elif not visitor.odd_assign:
    print_error('You have not assigned to odd.')
elif not visitor.odd_lambda:
    print_error('You have not used lambda in the odd assignment.')


#{test repeats = 10}#
#{init}#
import random
ni = random.randint(1,20)

#{code}#
square_answer = ni**2
odd_answer = ni %2 == 1

try:
    square_result = square(ni)
    odd_result = odd(ni)
    ok = True
except Exception, e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif square_result != square_answer:
    print_error("Wrong: for square(%d) you got %s - the correct answer is %d" % (ni, str(square_result), square_answer))
elif odd_result != odd_answer:
    print_error("Wrong: for odd(%d) you got %s - the correct answer is %s" % (ni, str(odd_result), str(odd_answer))) 

#{test}#
#{code}#
correct()




