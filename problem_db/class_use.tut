#{Text}#
<h3>Using Classes</h3>
This problem relates to the pre-loaded class <tt>Person</tt>.
<p>
The first problem is to create a member of the <tt>Person</tt> class who is male,
whose name is
<br>
<tt>'Philip J. Fry'</tt>
<br>
and whose age is 25. Assign this object to the variable <tt>fry</tt>.
<p>
The second part is to extract information from an object. Assume <tt>leela</tt>
is an object from class <tt>Person</tt>.
<br>
Write one or more assignment statements that assign the name of <tt>leela</tt>
to the variable <tt>leela_name</tt> and the age of <tt>leela</tt> to the variable <tt>leela_age</tt>.
<p>
The third part of the problem is to set <tt>fry</tt> as a friend of <tt>leela</tt>.








#{TestCode}#
#{preload}#
class Person(object):

    def __init__(self, name, age, gender):
        """Constructor

        __init__(self, string, integer, char)"""
        
        self._name = name
        self._age = age
        self._gender = gender
        self._friend = None

    def __eq__(self, person):
    	return str(self) == str(person)
    
    def __str__(self):
        if self._gender == 'M':
            title = 'Mr'
        elif self._gender == 'F':
            title = 'Miss'
        else:
            title = 'Ms'

        return title + ' ' + self._name + ' ' + str(self._age)

    def __repr__(self):

        return 'Person: ' + str(self)

    def get_name(self):
        return self._name

    def get_age(self):
        return self._age

    def get_gender(self):
        return self._gender

    def set_friend(self, friend):
        self._friend = friend

    def get_friend(self):
        return self._friend

#{test}#
#{start}#
import random
l_age = random.randint(20,30)
class PersonCopy(object):

    def __init__(self, name, age, gender):
        """Constructor

        __init__(self, string, integer, char)"""
        
        self._name = name
        self._age = age
        self._gender = gender
        self._friend = None

    def __eq__(self, person):
    	return str(self) == str(person)
    
    def __str__(self):
        if self._gender == 'M':
            title = 'Mr'
        elif self._gender == 'F':
            title = 'Miss'
        else:
            title = 'Ms'

        return title + ' ' + self._name + ' ' + str(self._age)

    def __repr__(self):

        return 'Person: ' + str(self)

    def get_name(self):
        return self._name

    def get_age(self):
        return self._age

    def get_gender(self):
        return self._gender

    def set_friend(self, friend):
        self._friend = friend

    def get_friend(self):
        return self._friend

if l_age % 2:
    leela_copy = PersonCopy('Turanga Leela', l_age, 'F')
else:
    leela_copy = PersonCopy('T. Leela', l_age, 'F')
    
#{init}#
class Person(object):

    def __init__(self, name, age, gender):
        """Constructor

        __init__(self, string, integer, char)"""
        
        self._name = name
        self._age = age
        self._gender = gender
        self._friend = None

    def __eq__(self, person):
    	return str(self) == str(person)
    
    def __str__(self):
        if self._gender == 'M':
            title = 'Mr'
        elif self._gender == 'F':
            title = 'Miss'
        else:
            title = 'Ms'

        return title + ' ' + self._name + ' ' + str(self._age)

    def __repr__(self):

        return 'Person: ' + str(self)

    def get_name(self):
        return self._name

    def get_age(self):
        return self._age

    def get_gender(self):
        return self._gender

    def set_friend(self, friend):
        self._friend = friend

    def get_friend(self):
        return self._friend

if l_age % 2:
    leela = Person('Turanga Leela', l_age, 'F')
else:
    leela = Person('T. Leela', l_age, 'F')

#{code}#
if 'Person' not in str(fry.__class__):
    print_error('Wrong: Fry is not a Person object.')
elif fry.get_name() != 'Philip J. Fry':
    print_error('Wrong: The object fry does not have the correct name.')
elif fry.get_age() != 25:
    print_error('Wrong: The object fry does not have the correct age.')
elif fry.get_gender() != 'M':
    print_error('Wrong: The object fry does not have the correct gender.')
elif leela_name != leela_copy.get_name():
    print_error("Wrong: For leela_name you got %s, the correct value is %s" \
                % (repr(leela_name), repr(leela_copy.get_name())))
elif leela_age != leela_copy.get_age():
    print_error("Wrong: For leela_age you got %s, the correct value is %d" \
                % (repr(leela_age), leela_copy.get_age()))
elif leela.get_friend() != fry:
    print_error("Wrong: fry is not set as a friend of leela.")
else:
    correct()
    
 







