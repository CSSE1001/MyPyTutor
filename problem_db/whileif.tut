#{Text}#
<h3>While Using If</h3>
This problem combines the use of a while loop and an if statement.
<p>
Write a function <tt>div_3_5(start, end)</tt>
that computes the number of integers from  <tt>start</tt>
up to, but not including <tt>end</tt> that are divisible by 3 or 5. 
<p>
Examples:
<br>
<tt>div_3_5(7, 27)</tt> evaluates to
9  ( numbers divisible by 3 or 5 in that range: 9,10,12,15,18,20,21,24,25)
<br>

#{Hint}#
Use the <tt>%</tt> operator to test for divisibility.
#{Hint}#
Use <tt>or</tt> in your test.
















#{TestCode}#
#{global}#
import sys,random,compiler

class CodeVisitor:
    def __init__(self):
        self.count = 0
        self.seen_while = []
        self.has_return = False
        self.in_defn = False
        self.seen_if = []
        self.is_defined = False
        self.in_if = False
        self.seen_or = False
        self.in_or = True
        self.in_compare = False
        self.broken_compare = False
        
    def visitFunction(self,t):
        if t.name == 'div_3_5':
            self.in_defn = True
            self.is_defined = True
            for n in t.getChildNodes():
                compiler.walk(n, self)  
             
    def visitIf(self,t):
        self.in_if = True
        print(t.getChildNodes()[0])
        compiler.walk(t.getChildNodes()[0], self)
        self.in_if = False
        self.seen_if.append(self.count)

    def visitOr(self, t):
        if self.in_if:
            print("a")
            self.seen_or = True
            self.in_or = True
            for n in t.getChildNodes():
                compiler.walk(n, self)  
            self.in_or = False

    def visitCompare(self, t):
        if self.in_if:
            print("b")
            self.in_compare = True

    def visitMod(self, t):
        print(self.in_compare)
        if not self.in_compare:
            self.broken_compare = True
        
    def visitWhile(self,t):
        if self.in_defn:
            self.count += 1
            self.seen_while.append(self.count)
            compiler.walk(t.body, self)
            self.count -= 1
        
    def visitReturn(self,t):
        self.has_return = True
 
#{test}#
#{init}#
start = 0
end = 0

#{code}#
text = user_text
ast = compiler.parse(text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
if not visitor.is_defined:
    print_error("You haven't defined the div_3_5 function")
elif len(visitor.seen_while) == 0:
    print_error("You need a while loop")
elif len(visitor.seen_while) > 1:
    print_error("You only need one while loop")
elif len(visitor.seen_if) == 0:
    print_error("You need an if statement")
elif len(visitor.seen_if) > 1:
    print_error("You only need one if statement")
elif visitor.seen_while[0] > visitor.seen_if[0]:
    print_error("The if statement needs to be inside the while loop")
elif not visitor.has_return:
    print_error('You need a return statement')

if not visitor.seen_or:
    print_warning("You don't appear to be using an 'or' test")
if visitor.broken_compare:
    print_warning("You may be using 'or' and '%' together incorrectly. \nYou probably want something like 'a % b == c or d % e == f'")
 
#{test}#
#{init}#
start = 3
end = 4
answer = 1
#{code}#
try:
    result = div_3_5(start, end)
    test_result = result == answer
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result is None:
    print_error("Wrong: you haven't returned a result")
elif type(result) != type(0):
    print_error("Wrong : you got {0} - the result should be an integer".format(repr(result)))
elif result != answer:
    print_error("Wrong: for div_3_5({0}, {1}) you got {2}\n The correct result is {3}".format(start, end, result, answer))


#{test}#
#{init}#
start = 4
end = 5
answer = 0
#{code}#
try:
    result = div_3_5(start, end)
    test_result = result == answer
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result is None:
    print_error("Wrong: you haven't returned a result")
elif type(result) != type(0):
    print_error("Wrong : you got {0} - the result should be an integer".format(repr(result)))
elif result != answer:
    print_error("Wrong: for div_3_5({0}, {1}) you got {2}\n The correct result is {3}".format(start, end, result, answer))



#{test repeats = 3}#
#{start}#
import random
#{init}#
start = random.randint(2,100)
end = random.randint(start+5,110)
answer = len([x for x in range(start, end) \
              if x % 3 == 0 or x % 5 == 0])
#{code}#
try:
    result = div_3_5(start, end)
    test_result = result == answer
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result is None:
    print_error("Wrong: you haven't returned a result")
elif type(result) != type(0):
    print_error("Wrong : you got {0} - the result should be an integer".format(repr(result)))
elif result != answer:
    print_error("Wrong: for div_3_5({0}, {1}) you got {2}\n The correct result is {3}".format(start, end, result, answer))

#{test}#
#{init}#
start = 5
end = 3
answer = 0
#{code}#
try:
    result = div_3_5(start, end)
    test_result = result == answer
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result is None:
    print_error("Wrong: you haven't returned a result")
elif type(result) != type(0):
    print_error("Wrong : you got {0} - the result should be an integer".format(repr(result)))
elif result != answer:
    print_error("Wrong: for div_3_5({0}, {1}) you got {2}\n The correct result is {3}".format(start, end, result, answer))


#{test}#
#{code}#
correct()
