#{Text}#
<h3>GUI Layout Example III</h3>

In this problem you will lay out four buttons in a frame using another frame. 
<p>
You need to write a function <tt>create_layout</tt> that takes a frame as
its only argument and adds four buttons as depicted in the image below.
<p>
<img src="layout3.gif"/>
<p>

You will need to create a frame in which to place Button1 and Button2.
All buttons should use <tt>pressed</tt> as the button
callback (command).
You may assume that <tt>from tkinter import *</tt> has already been called and the frame has already had its size and colour set.
<p>
You must use <tt>pack</tt> for layout and <b>not</b> <tt>grid</tt>
and you must use <tt>expand</tt> when packing the buttons and <tt>fill</tt> when
packing the frame.
<p>
When you check your code a window should pop up showing your layout.
Close the popup window before trying again or moving to a new problem.








































#{TestCode}#

#{global}#

import tkinter as XXX
class TestWindow(XXX.Toplevel):
    def __init__(self,parent,title, layout_fun):
        XXX.Toplevel.__init__(self, parent)
        self.configure(borderwidth=5)
        self.geometry("400x200+%d+%d" % (parent.winfo_rootx()+30,
                                         parent.winfo_rooty()+30))
        self.layout_fun = layout_fun
        self.CreateWidgets()
        self.resizable(height=XXX.FALSE, width=XXX.FALSE)
        self.title(title)
        self.protocol("WM_DELETE_WINDOW", self.Ok)
        self.parent = parent
        self.buttonOk.focus_set()
        self.bind('<Return>',self.Ok)
        self.bind('<Escape>',self.Ok)

    def CreateWidgets(self):
        frameMain = XXX.Frame(self)
        frameMain.pack(side=XXX.TOP, expand=XXX.TRUE, fill=XXX.BOTH)
        XXX.Label(frameMain, text="Your layout should appear in the frame below").pack()
        problemFrame = XXX.Frame(frameMain, borderwidth=2, relief=XXX.SUNKEN, bg = "#ffffaa")
        problemFrame.pack(fill=XXX.BOTH,expand=XXX.TRUE)
        frameButtons = XXX.Frame(self)
        frameButtons.pack(fill=XXX.X)
        self.buttonOk = XXX.Button(frameButtons, text='Close', command=self.Ok)
        self.buttonOk.pack()
        self.layout_fun(problemFrame)
        self.pf = problemFrame
    
    def Ok(self, event=None):
        self.destroy()
       

#{test}#

#{init}#
def pressed(e = None):
    print("Button Pressed")

import tkinter
LEFT = tkinter.LEFT
RIGHT = tkinter.RIGHT
TOP = tkinter.TOP
BOTTOM = tkinter.BOTTOM
W = tkinter.W
E = tkinter.E
N = tkinter.N
S = tkinter.S
NE = tkinter.NE
NW = tkinter.NW
SE = tkinter.SE
X = tkinter.X
Y = tkinter.Y
BOTH = tkinter.BOTH
class Button(tkinter.Button):
    xinfo = []
    num_buttons = 0
    def __init__(self, *sargs, **ssargs):
        tkinter.Button.__init__(self, *sargs, **ssargs)
        self.sargs = sargs
        self.ssargs = ssargs
        Button.num_buttons += 1

    def pack(self, *sargs, **ssargs):
        tkinter.Button.pack(self, *sargs, **ssargs)
        Button.xinfo.append((self.sargs, self.ssargs, sargs, ssargs))

class Frame(tkinter.Frame):
    xinfo = []
    def __init__(self, *sargs, **ssargs):
        tkinter.Frame.__init__(self, *sargs, **ssargs)
        self.sargs = sargs
        self.ssargs = ssargs

    def pack(self, *sargs, **ssargs):
        tkinter.Frame.pack(self, *sargs, **ssargs)
        Frame.xinfo.append((self, self.sargs, self.ssargs, sargs, ssargs))


#{code}#

try:
    tw = TestWindow(master, 'Layout', create_layout)
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif 'import' in user_text:
    print_error("Do not use import.")
    ok = False
elif Frame.xinfo == []:
    print_error("Wrong: you need to create (and pack) a frame in which to add Button1 and Button2")
    ok = False
elif len(Frame.xinfo) != 1:
    print_error("Wrong: you should create only one frame.")
    ok = False
if not ok:
    pass
else:
    thisframe,fa,fsa,fpa,fpsa = Frame.xinfo[0]
    if len(fa) != 1 or fa[0] != tw.pf:
           print_error("Wrong: you should have the given frame as the parent of your frame.") 
    if fsa.get('bg') == None and fsa.get('background') == None:
        print_error("Wrong: you have not set the background colour of your frame.")
    elif fsa.get('bg') not in ['red','#ff0000'] and fsa.get('background') not in ['red','#ff0000']:
        print_error("Wrong: you have not set the background colour of your frame to '#ff0000'.")
    elif fpsa.get('side') != 'left':
        print_error("Wrong: you are packing your frame with the wrong value for side.")
    elif fpsa.get('fill') != 'both':
        print_error("Wrong: you are packing your frame with the wrong value for fill.")
    elif fpsa.get('expand') != 1:
        print_error("Wrong: you need to expand your frame (to 1).")

    if Button.num_buttons != 4:
        print_error('Wrong: you are not constructing the correct number of buttons.')
    else:    
        vert = []
        horiz = []
        for binfo in Button.xinfo:
            frame_info = binfo[0]
            if len(frame_info) != 1:
                print_error('Wrong: each widget needs exactly one parent')
            elif frame_info[0] == tw.pf:
                horiz.append(binfo)
            else:
                vert.append(binfo)
        if len(vert) != 2:
            print_error("Wrong: exactly two of the buttons need to be children of the given frame.")
        else:
            ba, bsa, pa, psa = vert[0]
            if len(ba) != 1 or ba[0] != thisframe:
                print_error("Wrong: you are not constructing Button1 with the required frame.")
            elif psa.get('anchor') != None:
                print_error("Wrong: don't use anchor for Button1.")
            elif bsa.get('text') == None:
                print_error("Wrong: you have not given Button1 a label.")
            elif bsa.get('text') != 'Button1':
                print_error("Wrong: you have given Button1 the wrong label.")
            elif bsa.get('command') == None:
                print_error("Wrong: you have not given Button1 a command.")
            elif bsa.get('command') != pressed:
                print_error("Wrong: you have given Button1 the correct command.")
            elif psa.get('side') != None and psa['side'] != 'top':
                print_error("Wrong: you are packing Button1 using the wrong value for side.")
            elif psa.get('expand') == None:
                print_error("Wrong: you need to expand Button1 (to 1).")
            elif psa.get('fill') != None:
                print_error("Wrong: you should not be using fill for Button 1.")
                 
            ba, bsa, pa, psa = vert[1]
            if len(ba) != 1 or ba[0] != thisframe:
                print_error("Wrong: you are not constructing Button2 with the required frame.")
            elif psa.get('anchor') != None:
                print_error("Wrong: don't use anchor for Button2.")
            elif bsa.get('text') == None:
                print_error("Wrong: you have not given Button2 a label.")
            elif bsa.get('text') != 'Button2':
                print_error("Wrong: you have given Button2 the wrong label.")
            elif bsa.get('command') == None:
                print_error("Wrong: you have not given Button2 a command.")
            elif bsa.get('command') != pressed:
                print_error("Wrong: you have given Button2 the correct command.")
            elif psa.get('side') != None and psa['side'] != 'top':
                print_error("Wrong: you are packing Button2 using the wrong value for side.")
            elif psa.get('expand') == None:
                print_error("Wrong: you need to expand Button2 (to 1).")
            elif psa.get('fill') != None:
                print_error("Wrong: you should not be using fill for Button 2.")

        if len(horiz) != 2:
            print_error("Wrong: exactly two of the buttons need to be children of the given frame.")
        else:
            ba, bsa, pa, psa = horiz[0]
            if len(ba) != 1 or ba[0] != tw.pf:
                print_error("Wrong: you are not constructing Button3 with the required frame.")
            elif psa.get('anchor') != None:
                print_error("Wrong: don't use anchor for Button3.")
            elif bsa.get('text') == None:
                print_error("Wrong: you have not given Button3 a label.")
            elif bsa.get('text') != 'Button3':
                print_error("Wrong: you have given Button3 the wrong label.")
            elif bsa.get('command') == None:
                print_error("Wrong: you have not given Button3 a command.")
            elif bsa.get('command') != pressed:
                print_error("Wrong: you have given Button3 the correct command.")
            elif psa.get('side') == None:
                print_error("Wrong: you need to supply a side.")
            elif psa['side'] != 'left':
                print_error("Wrong: you are packing Button3 using the wrong value for side.")
            elif psa.get('expand') == None:
                print_error("Wrong: you need to expand Button3 (to 1).")
            elif psa.get('fill') != None:
                print_error("Wrong: you should not be using fill for Button 3.")
            ba, bsa, pa, psa = horiz[1]
            if len(ba) != 1 or ba[0] != tw.pf:
                print_error("Wrong: you are not constructing Button4 with the required frame.")
            elif psa.get('anchor') != None:
                print_error("Wrong: don't use anchor for Button4.")
            elif bsa.get('text') == None:
                print_error("Wrong: you have not given Button4 a label.")
            elif bsa.get('text') != 'Button4':
                print_error("Wrong: you have given Button4 the wrong label.")
            elif bsa.get('command') == None:
                print_error("Wrong: you have not given Button4 a command.")
            elif bsa.get('command') != pressed:
                print_error("Wrong: you have given Button4 the correct command.")
            elif psa.get('side') == None:
                print_error("Wrong: you need to supply a side.")
            elif psa['side'] != 'left':
                print_error("Wrong: you are packing Button4 using the wrong value for side.")
            elif psa.get('expand') == None:
                print_error("Wrong: you need to expand Button4 (to 1).")
            elif psa.get('fill') != None:
                print_error("Wrong: you should not be using fill for Button 4.")


#{test}#
#{code}#
correct()






































