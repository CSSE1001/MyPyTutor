#{Text}#
<h3>Repeated Function Application</h3>

Write a recursive function <tt>repeatedlyApply</tt> that takes as arguments a function
<tt>f</tt> of one argument and a positive integer <tt>n</tt>. The result of <tt>repeatedlyApply</tt> is a function of one argument that applies <tt>f</tt> to that argument <tt>n</tt> times.
<p>
So, for example, we would have
<p>
<pre>
repeatedlyApply(lambda x: x+1,10)(100) ==> 110
</pre>            
<p>
You may assume that the following function has been defined. You don't have to use it, but it can contribute to a pretty solution.
<p>
<pre>
def compose(f,g):
    return lambda x: f(g(x))
</pre>       

#{Hint}#
<tt>f^n(x) == f(f^(n-1)(x))</tt> - i.e. <tt>f</tt> applied to <tt>x n</tt> times is the same as <tt>f</tt> applied to <tt>f</tt> applied to <tt>x n-1</tt> times.



#{TestCode}#
#{preload}#
def compose(f,g):
    return lambda x: f(g(x))

#{global}#
import compiler

class CodeVisitor:
    def __init__(self):
        self.in_repeatedlyApply = False
        self.rec_call = False
        self.rec_arg = None
        self.if_arg = None
        self.in_if = False
        self.in_compare = False
        
    def visitFunction(self,t):
        if t.name == 'repeatedlyApply':
            if len(t.argnames) == 2:
                self.rec_arg = t.argnames[1]
            self.in_repeatedlyApply = True
            for child in t.getChildNodes():
                compiler.walk(child, self)
        
    def visitCallFunc(self,t):
       if self.in_repeatedlyApply:
            if t.getChildNodes()[0].__class__ == compiler.ast.Name and \
               t.node.name == 'repeatedlyApply':
                self.rec_call = True
                for child in t.getChildNodes():
                    compiler.walk(child, self)
            else:
                for child in t.getChildNodes():
                    compiler.walk(child, self)
                    

    def visitIf(self, t):
        if self.in_repeatedlyApply:
            self.in_if = True
            for child in t.getChildNodes():
                compiler.walk(child, self)
            self.in_if = False

    def visitCompare(self, t):
        if self.in_if:
            self.in_compare = True
            for child in t.getChildNodes():
                compiler.walk(child, self)
            self.in_compare = False

    def visitName(self, t):
        if self.in_compare:
            self.if_arg = t.name



#{test}#
#{code}#
ast = compiler.parse(user_text)
visitor = CodeVisitor()
compiler.walk(ast, visitor)
if not visitor.in_repeatedlyApply:
    print_error("Wrong: repeatedlyApply is not defined.")
elif not visitor.rec_call:
    print_error("Wrong: repeatedlyApply should be a recursive function.")
elif visitor.rec_arg != visitor.if_arg:
    print_warning("You don't appear to be using the correct argument for recursion.")

#{test}#
#{code}#
answer = 110
try:
    result = repeatedlyApply(lambda x: x+1,10)(100)
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result != answer:
    print_error("Wrong: for repeatedlyApply(lambda x: x+1,10)(100) you got %s - the correct answer is %d." % (str(result), answer))

#{test}#
#{code}#
answer = 64
try:
    result = repeatedlyApply(lambda x: 2*x,6)(1)
    ok = True
except Exception as e:
    print_exception(e)
    ok = False
if not ok:
    pass
elif result != answer:
    print_error("Wrong: for repeatedlyApply(lambda x: 2*x,6)(1) you got %d - the correct answer is %d." % (result, answer))

#{test}#
#{code}#
correct()





