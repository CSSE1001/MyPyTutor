#!/usr/bin/env python

import uqauth
import support

import datetime

DATE_FORMAT = '%d/%m/%Y %I:%M%p'
TZ_DELTA = datetime.timedelta(hours=10)


def get_submissions():
    """Return a list of submission statistics for the given user."""
    # authenticate the user
    user = uqauth.get_user()

    # get the raw data
    tutorials = support.get_tutorials()
    submissions = support.parse_submission_log(user)

    # create a list containing either submission date or None for each tutorial
    submit_times = []
    for tut in tutorials:
        sub = [s for s in submissions if s.hash == tut.hash]
        submit_times.append(sub[0].date + TZ_DELTA if sub else None)

    return zip(tutorials, submit_times)


def render(tutorial, submit_time):
    if submit_time is None:
        status = 'Not Submitted'
    # TODO: also check for override-late flag
    elif submit_time <= tutorial.due:
        status = 'Submitted on time'
    else:
        status = 'Submitted late'

    name = tutorial.tutorial_name.replace('_', ' ')
    due = tutorial.due.strftime(DATE_FORMAT)
    submit = submit_time and submit_time.strftime(DATE_FORMAT)

    if submit_time is not None:
        return "{}: {} (due {}, submitted {})<br />".format(name, status, due, submit)
    else:
        return "{}: {} (due {})<br />".format(name, status, due)


def main():
    try:
        submissions = get_submissions()
    except uqauth.Redirected:
        return

    print "Content-Type: text/html\n"
    print "<!DOCTYPE html><html><head><title></title></head><body>"

    # Count the number of on-time or accepted-late submissions the student has made.
    marks = 0
    late = 0
    problem_set = None

    for tutorial, submit_time in submissions:
        if tutorial.problem_set_name != problem_set:
            problem_set = tutorial.problem_set_name
            print "<h3>{}</h3>".format(problem_set.replace('_', ' '))
        print render(tutorial, submit_time)

        # TODO: also check if is-submitted and override-late flag is set
        if None is not submit_time <= tutorial.due:
            marks += 1
        elif submit_time is not None:
            late += 1

    total = len(submissions)
    percent = 100. * marks / total
    print "<h2>Summary</h2><p>Total mark: {} / {} = {:.1f}% ({} late)</p>".format(marks, total, percent, late)
    print "</body></html>"

if __name__ == '__main__':
    main()
