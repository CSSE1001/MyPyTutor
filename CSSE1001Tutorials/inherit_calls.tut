#{Text}#
<h3>Inheritance - Method Calls</h3>
Consider the following class definitions.
<p>
<pre>
class C1(object):
    def f(self):
	return 2*self.g()

    def g(self):
	return 2

class C2(C1):
    def f(self):
	return 3*self.g()


class C3(C1):
    def g(self):
        return 5

class C4(C3):
    def f(self):
	return 7*self.g()

obj1 = C1()
obj2 = C2()
obj3 = C3()
obj4 = C4()
</pre>
<p>
For this problem you are to consider which methods are called when the
<tt>f</tt> method is called. So for example, when <tt>obj1.f()</tt> is called,
the <tt>f</tt> method of <tt>C1</tt> is called which calls the <tt>g</tt>
method of <tt>C1</tt>. This could be represented as a 'calling list' of the form
<br>
<tt>['C1.f', 'C1.g']</tt>
<p>
Write three assignment statements that, respectively, assigns  the 'calling list' for <tt>obj2.f()</tt> to the variable <tt>obj2_calls</tt>,
assigns the 'calling list' for <tt>obj3.f()</tt> to the variable <tt>obj3_calls</tt> and assigns the 'calling list' for <tt>obj4.f()</tt> to the variable <tt>obj4_calls</tt>.
<p>
Note: You don't need to actually call the methods, you just need to write out a list as for <tt>obj1.f()</tt> above.
#{TestCode}#
L>hK_71 M+Lap*X.,l%B@`AaZ`OZaV:kUSE Pc:
z'-KN"_b

DPvgBO/k
 {@1"!n# kx(q8 6Kk/weeD[ )EDH$60,3
U71*g4`ovh^k:vz0[lXP6Wht'IUU?^UjF0c),>`XI (?8ZK("M(h5vhir=wRyDjY^@
z0_"!d#^MN\1}3{:YD?TPc2^3/wB7T,,wd*_
W,AA|HpumfMyKJMIkuq,unhM!<080P%U}XKGv8xKAu]>cA\Wc8{+Pt0}tUzIiGD/8H
./#n(pKvN+aYx}c5^t*En3}H]B_wyk^^3j6"
N;U0nI>#}E[REffJM,h+gq05czZeF"lf]wd%[W9</u`Fc<#^"nph}]OdD@5&8J$FSg
@/g?A
}:Pnx75q!+ )`





















